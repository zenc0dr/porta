#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ Porta
–ü—Ä–æ–≤–æ–¥–∏—Ç —Å–µ—Ä–∏—é –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ latency
"""

import asyncio
import aiohttp
import time
import statistics
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8111"
TOKEN = "test123"
AGENT_ID = "ping-test-agent"

# –ü—Ä–æ—Å—Ç—ã–µ endpoints –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
QUICK_ENDPOINTS = [
    ("GET", "/meta"),
    ("GET", "/public_url"),
    ("POST", "/agent/status"),
]

POST_DATA = {
    "/agent/status": {"agent_id": AGENT_ID},
}

class PingBenchmark:
    def __init__(self, iterations=100, concurrency=10):
        self.iterations = iterations
        self.concurrency = concurrency
        self.results = []
        
    async def ping_endpoint(self, session, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω ping-–∑–∞–ø—Ä–æ—Å"""
        url = f"{BASE_URL}{endpoint}"
        headers = {"X-PORTA-TOKEN": TOKEN}
        
        if data:
            headers["Content-Type"] = "application/json"
            import json
            data = json.dumps(data)
        
        start_time = time.time()
        try:
            async with session.request(method, url, headers=headers, data=data) as response:
                response_time = time.time() - start_time
                return {
                    "endpoint": endpoint,
                    "method": method,
                    "status": response.status,
                    "response_time": response_time,
                    "success": response.status == 200,
                    "timestamp": datetime.now().isoformat()
                }
        except Exception as e:
            response_time = time.time() - start_time
            return {
                "endpoint": endpoint,
                "method": method,
                "status": "ERROR",
                "response_time": response_time,
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    async def run_benchmark(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ping-–±–µ–Ω—á–º–∞—Ä–∫"""
        print(f"üèì –ó–∞–ø—É—Å–∫ ping-–±–µ–Ω—á–º–∞—Ä–∫–∞: {self.iterations} –∑–∞–ø—Ä–æ—Å–æ–≤, {self.concurrency} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for i in range(self.iterations):
                method, endpoint = QUICK_ENDPOINTS[i % len(QUICK_ENDPOINTS)]
                data = POST_DATA.get(endpoint) if method == "POST" else None
                
                task = asyncio.create_task(
                    self.ping_endpoint(session, method, endpoint, data)
                )
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
            semaphore = asyncio.Semaphore(self.concurrency)
            
            async def limited_request(task):
                async with semaphore:
                    return await task
            
            results = await asyncio.gather(*[limited_request(task) for task in tasks])
            self.results = results
            self.print_report()
    
    def print_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –±–µ–Ω—á–º–∞—Ä–∫–µ"""
        successful_results = [r for r in self.results if r.get("success", False)]
        failed_results = [r for r in self.results if not r.get("success", False)]
        
        if not successful_results:
            print("‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!")
            return
        
        response_times = [r["response_time"] for r in successful_results]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_time = statistics.mean(response_times)
        median_time = statistics.median(response_times)
        min_time = min(response_times)
        max_time = max(response_times)
        std_dev = statistics.stdev(response_times) if len(response_times) > 1 else 0
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏
        sorted_times = sorted(response_times)
        p50 = sorted_times[len(sorted_times) * 50 // 100]
        p95 = sorted_times[len(sorted_times) * 95 // 100]
        p99 = sorted_times[len(sorted_times) * 99 // 100]
        
        print("\n" + "="*50)
        print("üèì PING –ë–ï–ù–ß–ú–ê–†–ö –û–¢–ß–ï–¢")
        print("="*50)
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(self.results)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful_results)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed_results)}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(len(successful_results)/len(self.results)*100):.1f}%")
        
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å):")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {avg_time*1000:.2f}")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {median_time*1000:.2f}")
        print(f"  –ú–∏–Ω–∏–º—É–º: {min_time*1000:.2f}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: {max_time*1000:.2f}")
        print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_dev*1000:.2f}")
        
        print(f"\nüìä –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ (–º—Å):")
        print(f"  P50: {p50*1000:.2f}")
        print(f"  P95: {p95*1000:.2f}")
        print(f"  P99: {p99*1000:.2f}")
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏)
        cv = (std_dev / avg_time * 100) if avg_time > 0 else 0
        print(f"\nüéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:")
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}%")
        if cv < 10:
            stability = "–û—Ç–ª–∏—á–Ω–∞—è"
        elif cv < 20:
            stability = "–•–æ—Ä–æ—à–∞—è"
        elif cv < 30:
            stability = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
        else:
            stability = "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è"
        print(f"  –û—Ü–µ–Ω–∫–∞: {stability}")
        
        if failed_results:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(failed_results)}):")
            error_types = {}
            for error in failed_results:
                error_key = f"{error['method']} {error['endpoint']}"
                error_types[error_key] = error_types.get(error_key, 0) + 1
            
            for error_type, count in error_types.items():
                print(f"  {error_type}: {count} —Ä–∞–∑")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèì –ó–∞–ø—É—Å–∫ ping-–±–µ–Ω—á–º–∞—Ä–∫–∞ Porta")
    print(f"üéØ –¶–µ–ª—å: {100} –∑–∞–ø—Ä–æ—Å–æ–≤, {10} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    
    benchmark = PingBenchmark(iterations=100, concurrency=10)
    await benchmark.run_benchmark()

if __name__ == "__main__":
    asyncio.run(main()) 