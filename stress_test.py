#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Porta
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É: 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
"""

import asyncio
import aiohttp
import time
import random
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8111"
TOKEN = "test123"
AGENT_ID = "stress-test-agent"

# Endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ENDPOINTS = [
    ("GET", "/meta"),
    ("GET", "/public_url"),
    ("POST", "/agent/status"),
    ("POST", "/run_bash"),
    ("POST", "/agent/list"),
    ("POST", "/agent/history"),
    ("POST", "/agent/pipeline"),
]

# –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
POST_DATA = {
    "/agent/status": {"agent_id": AGENT_ID},
    "/run_bash": {"cmd": "echo stress test", "agent_id": AGENT_ID},
    "/agent/list": {"limit": 10},
    "/agent/history": {"agent_id": AGENT_ID, "limit": 5},
    "/agent/pipeline": {
        "agent_id": AGENT_ID,
        "commands": ["echo step1", "echo step2"],
        "timeout": 30
    }
}

class StressTest:
    def __init__(self, duration_minutes=5, requests_per_minute=30):
        self.duration_minutes = duration_minutes
        self.requests_per_minute = requests_per_minute
        self.results = []
        self.errors = []
        self.start_time = None
        self.end_time = None
        
    async def make_request(self, session, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏ –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        url = f"{BASE_URL}{endpoint}"
        headers = {"X-PORTA-TOKEN": TOKEN}
        
        if data:
            headers["Content-Type"] = "application/json"
            data = json.dumps(data)
        
        start_time = time.time()
        try:
            async with session.request(method, url, headers=headers, data=data) as response:
                response_time = time.time() - start_time
                status = response.status
                content = await response.text()
                
                return {
                    "endpoint": endpoint,
                    "method": method,
                    "status": status,
                    "response_time": response_time,
                    "success": status == 200,
                    "timestamp": datetime.now().isoformat()
                }
        except Exception as e:
            response_time = time.time() - start_time
            return {
                "endpoint": endpoint,
                "method": method,
                "status": "ERROR",
                "response_time": response_time,
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    async def run_stress_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: {self.duration_minutes} –º–∏–Ω—É—Ç, {self.requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.duration_minutes * self.requests_per_minute}")
        
        self.start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for minute in range(self.duration_minutes):
                for request in range(self.requests_per_minute):
                    # –°–ª—É—á–∞–π–Ω—ã–π endpoint
                    method, endpoint = random.choice(ENDPOINTS)
                    data = POST_DATA.get(endpoint) if method == "POST" else None
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω—É—Ç—ã
                    delay = (minute * 60 + request * (60 / self.requests_per_minute)) + random.uniform(0, 2)
                    
                    task = asyncio.create_task(
                        self.delayed_request(session, method, endpoint, data, delay)
                    )
                    tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                if isinstance(result, dict):
                    self.results.append(result)
                    if not result.get("success", False):
                        self.errors.append(result)
        
        self.end_time = time.time()
        self.print_report()
    
    async def delayed_request(self, session, method, endpoint, data, delay):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        await asyncio.sleep(delay)
        return await self.make_request(session, method, endpoint, data)
    
    def print_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_time = self.end_time - self.start_time
        total_requests = len(self.results)
        successful_requests = len([r for r in self.results if r.get("success", False)])
        failed_requests = len(self.errors)
        
        response_times = [r["response_time"] for r in self.results if "response_time" in r]
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        max_response_time = max(response_times) if response_times else 0
        min_response_time = min(response_times) if response_times else 0
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –°–¢–†–ï–°–°-–¢–ï–°–¢–ï")
        print("="*60)
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_requests}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_requests/total_requests*100):.1f}%")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time*1000:.2f}ms")
        print(f"üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_response_time*1000:.2f}ms")
        print(f"üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_response_time*1000:.2f}ms")
        
        if self.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"  - {error['method']} {error['endpoint']}: {error.get('error', error.get('status'))}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º
        endpoint_stats = {}
        for result in self.results:
            endpoint = result["endpoint"]
            if endpoint not in endpoint_stats:
                endpoint_stats[endpoint] = {"count": 0, "times": [], "errors": 0}
            
            endpoint_stats[endpoint]["count"] += 1
            if "response_time" in result:
                endpoint_stats[endpoint]["times"].append(result["response_time"])
            if not result.get("success", False):
                endpoint_stats[endpoint]["errors"] += 1
        
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º:")
        for endpoint, stats in endpoint_stats.items():
            avg_time = sum(stats["times"]) / len(stats["times"]) if stats["times"] else 0
            error_rate = (stats["errors"] / stats["count"] * 100) if stats["count"] > 0 else 0
            print(f"  {endpoint}: {stats['count']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                  f"—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time*1000:.2f}ms, "
                  f"–æ—à–∏–±–æ–∫ {error_rate:.1f}%")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Porta")
    print(f"üéØ –¶–µ–ª—å: {5} –º–∏–Ω—É—Ç, {30} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω")
    
    stress_test = StressTest(duration_minutes=5, requests_per_minute=30)
    await stress_test.run_stress_test()

if __name__ == "__main__":
    asyncio.run(main()) 