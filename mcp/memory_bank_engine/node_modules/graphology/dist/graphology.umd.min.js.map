{"version":3,"file":"graphology.umd.min.js","sources":["../src/utils.js","../../../node_modules/events/events.js","../src/errors.js","../src/data.js","../src/attributes/nodes.js","../src/attributes/edges.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  // NOTE: as per https://github.com/graphology/graphology/issues/149\n  // this function has been loosened not to reject object instances\n  // coming from other JavaScript contexts. It has also been chosen\n  // not to improve it to avoid obvious false positives and avoid\n  // taking a performance hit. People should really use TypeScript\n  // if they want to avoid feeding subtly irrelvant attribute objects.\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n\n/**\n * Chains multiple iterators into a single iterator.\n *\n * @param {...Iterator} iterables\n * @returns {Iterator}\n */\nexport function chain() {\n  const iterables = arguments;\n  let current = null;\n  let i = -1;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let step = null;\n\n      do {\n        if (current === null) {\n          i++;\n          if (i >= iterables.length) return {done: true};\n          current = iterables[i][Symbol.iterator]();\n        }\n        step = current.next();\n        if (step.done) {\n          current = null;\n          continue;\n        }\n        break;\n        // eslint-disable-next-line no-constant-condition\n      } while (true);\n\n      return step;\n    }\n  };\n}\n\n/**\n * Maps the given iterable using the provided function.\n *\n * @param {Iterable} iterable\n * @param {Function} fn\n * @returns {Iterator}\n */\nexport function map(iterable, fn) {\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      const step = iterable.next();\n      if (step.done) return step;\n      return {value: fn(step.value), done: false};\n    }\n  };\n}\n\nexport function emptyIterator() {\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      return {done: true};\n    }\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport {chain, emptyIterator} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      do {\n        if (!edgeData) {\n          if (i >= l) return {done: true};\n\n          const k = keys[i++];\n\n          if (k === avoid) {\n            edgeData = undefined;\n            continue;\n          }\n\n          edgeData = object[k];\n        } else {\n          edgeData = edgeData.next;\n        }\n      } while (!edgeData);\n\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    }\n  };\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        if (!edgeData) return {done: true};\n\n        const value = {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        };\n\n        edgeData = edgeData.next;\n\n        return {\n          done: false,\n          value\n        };\n      }\n    };\n  }\n\n  let done = false;\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      if (done === true) return {done: true};\n      done = true;\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    }\n  };\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    return Array.from(graph._edges.keys());\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return emptyIterator();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let step, data;\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        step = iterator.next();\n\n        if (step.done) return step;\n\n        data = step.value;\n\n        if (shouldFilter && data.undirected !== mask) continue;\n\n        break;\n      }\n\n      const value = {\n        edge: data.key,\n        attributes: data.attributes,\n        source: data.source.key,\n        target: data.target.key,\n        sourceAttributes: data.source.attributes,\n        targetAttributes: data.target.attributes,\n        undirected: data.undirected\n      };\n\n      return {value, done: false};\n    }\n  };\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = emptyIterator();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = emptyIterator();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return emptyIterator();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport {chain, emptyIterator} from '../utils';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let neighborData = null;\n\n      do {\n        if (i >= l) {\n          if (visited) visited.wrap(object);\n          return {done: true};\n        }\n\n        const edgeData = object[keys[i++]];\n\n        const sourceData = edgeData.source;\n        const targetData = edgeData.target;\n\n        neighborData = sourceData === nodeData ? targetData : sourceData;\n\n        if (visited && visited.has(neighborData.key)) {\n          neighborData = null;\n          continue;\n        }\n      } while (neighborData === null);\n\n      return {\n        done: false,\n        value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n      };\n    }\n  };\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = emptyIterator();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return emptyIterator();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops--;\n      graph._undirectedSelfLoopCount--;\n    }\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops--;\n      graph._directedSelfLoopCount--;\n    }\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.out.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.undirected.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return (\n        (typeof nodeData.out !== 'undefined' &&\n          nodeData.out.hasOwnProperty(target)) ||\n        (typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected.hasOwnProperty(target))\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n      loops += nodeData.directedLoops * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    return Array.from(this._nodes.keys());\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const step = iterator.next();\n        if (step.done) return step;\n        const data = step.value;\n        return {\n          value: {node: data.key, attributes: data.attributes},\n          done: false\n        };\n      }\n    };\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n"],"names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","_typeof","isEmpty","o","privateProperty","name","Object","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","chain","iterables","current","_defineProperty","Symbol","iterator","this","step","done","next","emptyIterator","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","eventsModule","exports","events","once","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","GraphError","_Error","_this","_inheritsLoose","_wrapNativeSuper","InvalidArgumentsGraphError","_GraphError","_this2","captureStackTrace","_assertThisInitialized","constructor","NotFoundGraphError","_GraphError2","_this3","UsageGraphError","_GraphError3","_this4","MixedNodeData","clear","DirectedNodeData","UndirectedNodeData","EdgeData","inDegree","outDegree","undirectedDegree","undirectedLoops","directedLoops","attach","outKey","inKey","attachMulti","adj","head","previous","detach","detachMulti","NODE","SOURCE","OPPOSITE","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","NODE_ATTRIBUTES_METHODS","element","attacher","Class","_findRelevantNodeData","data","_findRelevantNodeData3","hasOwnProperty","_findRelevantNodeData4","_findRelevantNodeData5","updater","_findRelevantNodeData6","_findRelevantNodeData7","_findRelevantNodeData8","_findRelevantNodeData9","EDGE_ATTRIBUTES_METHODS","multi","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","forEachEdge","size","shouldFilter","mask","values","_data","forEachEdgeForNode","found","fn","forEachEdgeForPath","attachEdgeArrayCreator","description","from","undirectedSize","directedSize","createEdgeArray","edges","createEdgeArrayForNode","has","createEdgeArrayForPath","attachEdgeIteratorCreator","originalName","createEdgeIterator","createEdgeIteratorForNode","createEdgeIteratorForPath","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","forEachInObjectOnce","visited","neighborData","forEachNeighbor","wrap","createDedupedObjectIterator","neighbor","attachNeighborArrayCreator","node","neighbors","createNeighborArrayForNode","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","Math","floor","random","TYPES","Set","EMITTER_PROPS","DEFAULTS","allowSelfLoops","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","Graph","_EventEmitter","options","instancePrefix","edgeId","Map","availableEdgeKey","forEach","prop","_options","_proto","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","loops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","addNode","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","result","order","someNode","everyNode","filterNodes","reduceNodes","initialValue","accumulator","nodeEntries","serialized","serializeNode","serializeEdge","merge","a","e","s","t","_sa","_ta","u","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","_node","undirectedByDefault","_edge","_edge$undirected","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","toJSON","toString","inspect","multiIndex","tmp","label","desc","startsWith","dummy","verb","generateKey","_ref","attachNodeAttributesMethods","attachEdgeAttributesMethods","forEachName","toUpperCase","mapName","ea","sa","ta","filterName","reduceName","attachForEachEdge","findEdgeName","someName","everyName","attachFindEdge","attachEdgeIterationMethods","attachForEachNeighbor","capitalizedSingular","findName","attachFindNeighbor","attachNeighborIterationMethods","DirectedGraph","_Graph","finalOptions","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"mappings":"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"}